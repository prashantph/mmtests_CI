#!/bin/bash
# This script installs sockperf and runs the regression tests
P=sockperf-bench
DEFAULT_VERSION=0
. $SHELLPACK_INCLUDE/common.sh
TIME_CMD=`which time`
if [ "$TIME_CMD" = "" ]; then
        TIMEFORMAT="%2Uuser %2Ssystem %Relapsed %P%%CPU"
        TIME_CMD="time"
fi
TASKSET_SERVER=
TASKSET_CLIENT=
SERVER_HOST=127.0.0.1
if [ "$REMOTE_SERVER_HOST" != "" ]; then
	SERVER_HOST=$REMOTE_SERVER_HOST
fi

# Basic argument parser
TASKSET_SERVER=
TASKSET_CLIENT=
TASKSET_ALL=
SERVERSIDE_COMMAND=none
SERVERSIDE_NAME=`date +%Y%m%d-%H%M-%S`

while [ "$1" != "" ]; do
	case "$1" in
	-v)
		VERSION=$2
		shift 2
		;;
	--serverside-command)
		SERVERSIDE_COMMAND=$2
		shift 2
		;;
	--serverside-name)
		SERVERSIDE_NAME=$2
		shift 2
		;;
	--install-only)
		INSTALL_ONLY=yes
		shift
		;;
	--install-force)
		INSTALL_FORCE=yes
		shift
		;;
	--bind-pinned)
		CPUA=`numactl --hardware | grep ^node | grep cpus: | head -1 | awk '{print $4}'`
		TASKSET_SERVER="taskset -c $CPUA"
		TASKSET_CLIENT="taskset -c $CPUA"
		TASKSET_ALL="taskset -c $CPUA"
		shift
		;;
	--bind-cross-node)
		CPUA=`numactl --hardware | grep ^node | grep cpus: | head -1 | awk '{print $4}'`
		CPUB=`numactl --hardware | grep ^node | grep cpus: | tail -1 | awk '{print $NF}'`
		TASKSET_SERVER="taskset -c $CPUA"
		TASKSET_CLIENT="taskset -c $CPUB"
		TASKSET_ALL="taskset -c $CPUA,$CPUB"
		shift
		;;
	--bind-cross-socket)
		CPUA=`numactl --hardware | grep ^node | grep cpus: | head -1 | awk '{print $4}'`
		CPUB=`list-cpu-siblings.pl $CPUA cores 0 | awk -F , '{print $1}'`
		TASKSET_SERVER="taskset -c $CPUA"
		TASKSET_CLIENT="taskset -c $CPUB"
		TASKSET_ALL="taskset -c $CPUA,$CPUB"
		shift
		;;
	--bind-cross-ht)
		CPUA=`numactl --hardware | grep ^node | grep cpus: | head -1 | awk '{print $4}'`
		CPUB=`list-cpu-siblings.pl $CPUA threads 0 | awk -F , '{print $1}'`
		if [ "$CPUB" = "" ]; then
			echo ERROR: Could not identify HT thread for CPU $CPUA
			exit $SHELLPACK_ERROR
		fi
		TASKSET_SERVER="taskset -c $CPUA"
		TASKSET_CLIENT="taskset -c $CPUB"
		TASKSET_ALL="taskset -c $CPUA,$CPUB"
		shift
		;;
	--test-type)
		SOCKPERF_TESTTYPE=$2
		shift 2
		;;
	--protocol)
		SOCKPERF_PROTOCOL=$2
		shift 2
		;;
	--duration)
		SOCKPERF_DURATION=$2
		shift 2
		;;
	--msg-sizes)
		SOCKPERF_MESSAGE_SIZES=$2
		shift 2
		;;
	--msg-rates)
		SOCKPERF_MESSAGE_RATES=$2
		shift 2
		;;
	*)
		echo Unrecognised option: $1
		shift
	esac
done
if [ "$TASKSET_SERVER" != "" ]; then
	echo TASKSET_SERVER: $TASKSET_SERVER
	echo TASKSET_CLIENT: $TASKSET_CLIENT
fi
if [ -z "$VERSION" ]; then
	VERSION=$DEFAULT_VERSION
fi
# Include monitor hooks
. $SHELLPACK_INCLUDE/include-monitor.sh

if [ "$INSTALL_FORCE" = "yes" ]; then
	rm -rf $SHELLPACK_SOURCES/sockperf-${VERSION}
fi
if [ ! -d $SHELLPACK_SOURCES/sockperf-${VERSION}-installed ]; then
	mmtests_activity source-install
	$SHELLPACK_INCLUDE/shellpack-install-sockperf -v ${VERSION}  || die sockperf install script returned error
	mmtests_activity source-installed
fi
cd $SHELLPACK_SOURCES/sockperf-${VERSION}-installed || die Failed to cd to sockperf install directory
if [ "$INSTALL_ONLY" = "yes" ]; then
	echo sockperf installed only as requested.
	exit $SHELLPACK_SUCCESS
fi
if [ "$INSTALL_ONLY" = "yes" ]; then
	echo sockperf installed only as requested.
	exit $SHELLPACK_SUCCESS
fi

SOCKPERF_MESSAGE_SIZES=`echo $SOCKPERF_MESSAGE_SIZES | tr ',' ' '`
SOCKPERF_MESSAGE_RATES=`echo $SOCKPERF_MESSAGE_RATES | tr ',' ' '`

if [ "$SOCKPERF_PROTOCOL" = "" ]; then
	SOCKPERF_PROTOCOL=`echo $SERVERSIDE_NAME | awk -F - '{print $1}'`
fi
case $SOCKPERF_PROTOCOL in
tcp)
	PROTOCOL_SWITCH=--tcp
	;;
udp)
	PROTOCOL_SWITCH=
	;;
*)
	die Unrecognised protocol, specify tcp or udp
	;;
esac

case $SOCKPERF_TESTTYPE in
ping-pong)
	SOCKPERF_MESSAGE_RATES=max
	ITERATIONS=10
	;;
throughput)
	SOCKPERF_MESSAGE_RATES=max
	ITERATIONS=10
	;;
under-load)
	ITERATIONS=1
	;;
esac

cd $SHELLPACK_SOURCES/sockperf-${VERSION}-installed || die Failed to cd to sockperf directory

export REMOTE_SERVER_SCRIPT=$SCRIPTDIR/shellpacks/shellpack-bench-sockperf
case $SERVERSIDE_COMMAND in
start)
	echo Starting server $TASKSET_SERVER
	mmtests_activity sockperf-$SERVERSIDE_NAME
	monitor_pre_hook $LOGDIR_RESULTS sockperf-$SERVERSIDE_NAME
	SOCKPERFROOT=$SHELLPACK_SOURCES/sockperf-${VERSION}-installed 
	killall sockperf 2> /dev/null
	nohup $TASKSET_SERVER $SOCKPERFROOT/bin/sockperf server $PROTOCOL_SWITCH 0<&- &>/dev/null &
	echo $! > /tmp/sockperf-server.pid
	sleep 2
	ps -p `cat /tmp/sockperf-server.pid`
	if [ $? -ne 0 ]; then
		die Failed to start sockperf
	fi
	exit $SHELLPACK_SUCCESS
	;;
stop)
	monitor_post_hook $LOGDIR_RESULTS sockperf-$SERVERSIDE_NAME
	echo Killing server
	kill `cat /tmp/sockperf-server.pid`
	rm /tmp/sockperf-server.pid
	exit $SHELLPACK_SUCCESS
	;;
flush)
	exit $SHELLPACK_SUCCESS
	;;
none)
	if [ -e /tmp/sockperf-server.pid ]; then
		echo Killing old servers
		kill `cat /tmp/sockperf-server.pid`
	fi

	echo Starting server
	SOCKPERFROOT=$SHELLPACK_SOURCES/sockperf-${VERSION}-installed 
	$TASKSET_SERVER $SOCKPERFROOT/bin/sockperf server $PROTOCOL_SWITCH &
	echo $! > /tmp/sockperf-server.pid
	sleep 2
	ps -p `cat /tmp/sockperf-server.pid`
	if [ $? -ne 0 ]; then
		die Failed to start sockperf
	fi
	;;
*)
	die Unrecognised server-side command
	;;
esac

for SIZE in $SOCKPERF_MESSAGE_SIZES; do
	for RATE in $SOCKPERF_MESSAGE_RATES; do
		mmtests_server_ctl start --serverside-name $SOCKPERF_PROTOCOL-$SIZE-$RATE
		mmtests_activity size $SOCKPERF_PROTOCOL-$SIZE-$RATE

		monitor_pre_hook $LOGDIR_RESULTS $SOCKPERF_PROTOCOL-$SIZE-$RATE
for ITERATION in `seq 1 $ITERATIONS`; do
	mmtests_wait_token "iteration_begin"
	mmtests_activity iteration $ITERATION
	eval sh /mmtests/mmtests_CI/data_collection.sh 20 $LOGDIR_RESULTS $SOCKPERF_PROTOCOL-$SIZE-$RATE-$ITERATION &
	echo Running $SOCKPERF_TESTTYPE test $PROTOCOL size $SIZE rate $RATE iteration $ITERATION/$ITERATIONS $TASKSET_CLIENT

		eval $TASKSET_CLIENT $SOCKPERFROOT/bin/sockperf 			\
			$SOCKPERF_TESTTYPE $PROTOCOL_SWITCH				\
			--full-log $LOGDIR_RESULTS/$SOCKPERF_PROTOCOL-$SIZE-${RATE}-$ITERATION.log \
			-t $SOCKPERF_DURATION						\
			--mps $RATE							\
			--msg-size $SIZE						\
			--no-rdtsc 2>&1 | tee $LOGDIR_RESULTS/$SOCKPERF_PROTOCOL-$SIZE-$RATE-${ITERATION}.stdout
sync
mmtests_wait_token "iteration_end"
done
		monitor_post_hook $LOGDIR_RESULTS $SOCKPERF_PROTOCOL-$SIZE-$RATE
		gzip $LOGDIR_RESULTS/$SOCKPERF_PROTOCOL-$SIZE-${RATE}-$ITERATION.log

		mmtests_server_ctl stop --serverside-name $SOCKPERF_PROTOCOL-$SIZE-$RATE
	done
done

kill `cat /tmp/sockperf-server.pid`
rm /tmp/sockperf-server.pid

exit $SHELLPACK_SUCCESS
