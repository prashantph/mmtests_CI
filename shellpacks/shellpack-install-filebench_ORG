#!/bin/bash

P=filebench-install
DEFAULT_VERSION=1.4.9.1
. $SHELLPACK_INCLUDE/common.sh
TIME_CMD=`which time`
if [ "$TIME_CMD" = "" ]; then
        TIMEFORMAT="%2Uuser %2Ssystem %Relapsed %P%%CPU"
        TIME_CMD="time"
fi
WEB_LOCATION="https://10gbps-io.dl.sourceforge.net/project/filebench/older/filebench-1.4.9.1/filebench-1.4.9.1.tar.gz"
MIRROR_LOCATION="$WEBROOT/filebench"

# Basic argument parser
TASKSET_SERVER=
TASKSET_CLIENT=
TASKSET_ALL=
SERVERSIDE_COMMAND=none
SERVERSIDE_NAME=`date +%Y%m%d-%H%M-%S`

while [ "$1" != "" ]; do
	case "$1" in
	-v)
		VERSION=$2
		shift 2
		;;
	--serverside-command)
		SERVERSIDE_COMMAND=$2
		shift 2
		;;
	--serverside-name)
		SERVERSIDE_NAME=$2
		shift 2
		;;
	*)
		echo Unrecognised option: $1
		shift
	esac
done
if [ "$TASKSET_SERVER" != "" ]; then
	echo TASKSET_SERVER: $TASKSET_SERVER
	echo TASKSET_CLIENT: $TASKSET_CLIENT
fi
if [ -z "$VERSION" ]; then
	VERSION=$DEFAULT_VERSION
fi

rm -rf $SHELLPACK_SOURCES/filebench-${VERSION}
# Unconditionally fetch the tar to find out the real version number
TARFILE=filebench-${VERSION}.tar.gz
sources_fetch $WEB_LOCATION/filebench-${VERSION}/$TARFILE $MIRROR_LOCATION/$TARFILE $SHELLPACK_SOURCES/$TARFILE $WEB_LOCATION_ALT/filebench-${VERSION}/$TARFILE
cd $SHELLPACK_SOURCES
tar -xf $TARFILE
if [ $? -ne 0 ]; then
	error "$P: tar xf filebench-${VERSION}.tar.gz failed"
	popd > /dev/null
	exit $SHELLPACK_ERROR
fi

# Rename directory to something we expect.
DST_DIR=`tar tf $TARFILE | head -n 1 | awk -F / '{print $1}'`
mv $DST_DIR filebench-$VERSION
pushd filebench-$VERSION > /dev/null || die Failed to rename tar

pushd $SHELLPACK_SOURCES/filebench-$VERSION || die Failed to change to source directory
for FILE in `find -name "*"`; do
	touch $FILE
done

FACTOR=$((MEMTOTAL_BYTES/(7500*1048576)+1))
echo Shared region sized by factor $FACTOR
sed -i -e "s/#define\sFILEBENCH_NFILESETENTRIES.*/#define FILEBENCH_NFILESETENTRIES (1024*1024*$FACTOR)/" ipc.h

# Patch benchmark with fix for direct IO
TEMPFILE=`mktemp`
LINECOUNT=`wc -l $0 | awk '{print $1}'`
PATCHSTART=`grep -n "BEGIN PATCH FILE" $0 | tail -1 | awk -F : '{print $1}'`
tail -$(($LINECOUNT-$PATCHSTART)) $0 | grep -v "^###" > $TEMPFILE
cat $TEMPFILE | patch -p1 || exit $SHELLPACK_FAILURE
rm $TEMPFILE

# Remove pthread unlock which never locks
sed -i -e '/Release the read lock, allowing threads to start/d' parser_gram.y
sed -i -e '/pthread_rwlock_unlock/d' parser_gram.y

export CFLAGS="${MMTESTS_BUILD_CFLAGS:--O2} $MMTESTS_BUILD_CFLAGS_EXTRA"
eval ./configure --prefix=$SHELLPACK_SOURCES/filebench-${VERSION}-installed 
if [ $? -ne 0 ]; then
	cp /usr/share/automake*/config.guess .
	cp /usr/share/automake*/config.sub .
	eval ./configure --prefix=$SHELLPACK_SOURCES/filebench-${VERSION}-installed 
	if [ $? -ne 0 ]; then
		error "$P: configure failed"
		popd > /dev/null
		exit $SHELLPACK_ERROR
	fi
fi
unset CFLAGS
export CFLAGS="${MMTESTS_BUILD_CFLAGS:--O2} $MMTESTS_BUILD_CFLAGS_EXTRA"
make -j$NUMCPUS
if [ $? -ne 0 ]; then
	if [ "$MAKE_RETRY" = "yes" ]; then
		make -j$NUMCPUS 
	fi
	error "$P: make failed"
	popd > /dev/null
	exit $SHELLPACK_ERROR
fi
make install
if [ $? -ne 0 ]; then
	error "$P: make install failed"
	popd > /dev/null
	exit $SHELLPACK_ERROR
fi

exit $SHELLPACK_SUCCESS

=== BEGIN PATCH FILE ===
diff --git a/flowop_library.c b/flowop_library.c
index 634897e..85ac02a 100644
--- a/flowop_library.c
+++ b/flowop_library.c
@@ -491,7 +491,7 @@ flowoplib_iobufsetup(threadflow_t *threadflow, flowop_t *flowop,
 	}
 
 	if (flowoplib_fileattrs(flowop) & FLOW_ATTR_DIRECTIO)
-		*iobufp = (caddr_t)((((unsigned long)(*iobufp)) / 512) * 512);
+		*iobufp = (caddr_t)((((unsigned long)(*iobufp) + 512) / 512) * 512);
 
 	return (FILEBENCH_OK);
 }
