#!/bin/bash
# Run perf-bench syscall benchmark

P=perfsyscall-bench
DEFAULT_VERSION=5.1
. $SHELLPACK_INCLUDE/common.sh
TIME_CMD=`which time`
if [ "$TIME_CMD" = "" ]; then
        TIMEFORMAT="%2Uuser %2Ssystem %Relapsed %P%%CPU"
        TIME_CMD="time"
fi
PERFSYSCALL_LOOPS=500000
PERFSYSCALL_ITERATIONS=30

# Basic argument parser
TASKSET_SERVER=
TASKSET_CLIENT=
TASKSET_ALL=
SERVERSIDE_COMMAND=none
SERVERSIDE_NAME=`date +%Y%m%d-%H%M-%S`

while [ "$1" != "" ]; do
	case "$1" in
	-v)
		VERSION=$2
		shift 2
		;;
	--serverside-command)
		SERVERSIDE_COMMAND=$2
		shift 2
		;;
	--serverside-name)
		SERVERSIDE_NAME=$2
		shift 2
		;;
	--install-only)
		INSTALL_ONLY=yes
		shift
		;;
	--install-force)
		INSTALL_FORCE=yes
		shift
		;;
	--bind-pinned)
		CPUA=`numactl --hardware | grep ^node | grep cpus: | head -1 | awk '{print $4}'`
		TASKSET_SERVER="taskset -c $CPUA"
		TASKSET_CLIENT="taskset -c $CPUA"
		TASKSET_ALL="taskset -c $CPUA"
		shift
		;;
	--bind-cross-node)
		CPUA=`numactl --hardware | grep ^node | grep cpus: | head -1 | awk '{print $4}'`
		CPUB=`numactl --hardware | grep ^node | grep cpus: | tail -1 | awk '{print $NF}'`
		TASKSET_SERVER="taskset -c $CPUA"
		TASKSET_CLIENT="taskset -c $CPUB"
		TASKSET_ALL="taskset -c $CPUA,$CPUB"
		shift
		;;
	--bind-cross-socket)
		CPUA=`numactl --hardware | grep ^node | grep cpus: | head -1 | awk '{print $4}'`
		CPUB=`list-cpu-siblings.pl $CPUA cores 0 | awk -F , '{print $1}'`
		TASKSET_SERVER="taskset -c $CPUA"
		TASKSET_CLIENT="taskset -c $CPUB"
		TASKSET_ALL="taskset -c $CPUA,$CPUB"
		shift
		;;
	--bind-cross-ht)
		CPUA=`numactl --hardware | grep ^node | grep cpus: | head -1 | awk '{print $4}'`
		CPUB=`list-cpu-siblings.pl $CPUA threads 0 | awk -F , '{print $1}'`
		if [ "$CPUB" = "" ]; then
			echo ERROR: Could not identify HT thread for CPU $CPUA
			exit $SHELLPACK_ERROR
		fi
		TASKSET_SERVER="taskset -c $CPUA"
		TASKSET_CLIENT="taskset -c $CPUB"
		TASKSET_ALL="taskset -c $CPUA,$CPUB"
		shift
		;;
	--loops)
		PERFSYSCALL_LOOPS=$2
		shift 2
		;;
	--iterations)
		PERFSYSCALL_ITERATIONS=$2
		shift 2
		;;
	*)
		echo Unrecognised option: $1
		shift
	esac
done
if [ "$TASKSET_SERVER" != "" ]; then
	echo TASKSET_SERVER: $TASKSET_SERVER
	echo TASKSET_CLIENT: $TASKSET_CLIENT
fi
if [ -z "$VERSION" ]; then
	VERSION=$DEFAULT_VERSION
fi
# Include monitor hooks
. $SHELLPACK_INCLUDE/include-monitor.sh

if [ "$INSTALL_FORCE" = "yes" ]; then
	rm -rf $SHELLPACK_SOURCES/perfbuild-${VERSION}
fi
if [ ! -d $SHELLPACK_SOURCES/perfbuild-${VERSION}-installed ]; then
	mmtests_activity source-install
	if [ ! -e  $SHELLPACK_INCLUDE/shellpack-install-perfbuild ]; then
		$SHELLPACK_TOPLEVEL/shellpack_src/src/refresh.sh perfbuild
	fi
	$SHELLPACK_INCLUDE/shellpack-install-perfbuild -v ${VERSION}  || die perfbuild install script returned error
	mmtests_activity source-installed
fi
cd $SHELLPACK_SOURCES/perfbuild-${VERSION}-installed || die Failed to cd to perfbuild install directory
if [ "$INSTALL_ONLY" = "yes" ]; then
	echo perfbuild installed only as requested.
	exit $SHELLPACK_SUCCESS
fi
if [ "$INSTALL_ONLY" = "yes" ]; then
	echo perfsyscall installed only as requested.
	exit $SHELLPACK_SUCCESS
fi

PERF_DIR=$SHELLPACK_SOURCES/perfbuild-${VERSION}-installed/bin
PERF_CMD=${PERF_DIR}/perf

echo Perf invocation: $TASKSET_SERVER $PERF_CMD bench syscall basic -l $PERFSYSCALL_LOOPS
monitor_pre_hook $LOGDIR_RESULTS $P
for ITERATION in `seq 1 $PERFSYSCALL_ITERATIONS`; do
	mmtests_wait_token "iteration_begin"
	mmtests_activity iteration $ITERATION
eval sh /mmtests/mmtests_CI/data_collection.sh $LOGDIR_RESULTS PERFSYSCALL \
$TASKSET_SERVER $PERF_CMD bench syscall basic -l $PERFSYSCALL_LOOPS \
                        2>&1|tee $LOGDIR_RESULTS/syscall-perf.log
 
$TASKSET_SERVER $PERF_CMD bench syscall basic -l $PERFSYSCALL_LOOPS \
			2>&1 | tee $LOGDIR_RESULTS/syscall-${ITERATION}.log
sync
mmtests_wait_token "iteration_end"
done
monitor_post_hook $LOGDIR_RESULTS $P

exit $SHELLPACK_SUCCESS
