#!/bin/bash

P=bonniepp-bench
DEFAULT_VERSION=1.98
. $SHELLPACK_INCLUDE/common.sh
TIME_CMD=`which time`
if [ "$TIME_CMD" = "" ]; then
        TIMEFORMAT="%2Uuser %2Ssystem %Relapsed %P%%CPU"
        TIME_CMD="time"
fi

DATASET_SIZE=0
CHAR_IO_SIZE=0
NR_FILES=0
MACHINE=`hostname`
FSYNC=no
FSYNC_PARAM=

# Basic argument parser
TASKSET_SERVER=
TASKSET_CLIENT=
TASKSET_ALL=
SERVERSIDE_COMMAND=none
SERVERSIDE_NAME=`date +%Y%m%d-%H%M-%S`

while [ "$1" != "" ]; do
	case "$1" in
	-v)
		VERSION=$2
		shift 2
		;;
	--serverside-command)
		SERVERSIDE_COMMAND=$2
		shift 2
		;;
	--serverside-name)
		SERVERSIDE_NAME=$2
		shift 2
		;;
	--install-only)
		INSTALL_ONLY=yes
		shift
		;;
	--install-force)
		INSTALL_FORCE=yes
		shift
		;;
	--dataset)
		DATASET_SIZE=$2
		shift 2
		;;
	--char_io_size)
		CHAR_IO_SIZE=$2
		shift 2
		;;
	--nr_files)
		NR_FILES=$2
		shift 2
		;;
	--dirsize)
		DIRECTORY_SIZE=$2
		shift 2
		;;
	--nr_directories)
		NR_DIRECTORIES=$2
		shift 2
		;;
	--sync)
		FSYNC=yes
		shift
		;;
	*)
		echo Unrecognised option: $1
		shift
	esac
done
if [ "$TASKSET_SERVER" != "" ]; then
	echo TASKSET_SERVER: $TASKSET_SERVER
	echo TASKSET_CLIENT: $TASKSET_CLIENT
fi
if [ -z "$VERSION" ]; then
	VERSION=$DEFAULT_VERSION
fi
# Include monitor hooks
. $SHELLPACK_INCLUDE/include-monitor.sh

if [ "$INSTALL_FORCE" = "yes" ]; then
	rm -rf $SHELLPACK_SOURCES/bonniepp-${VERSION}
fi
if [ ! -d $SHELLPACK_SOURCES/bonniepp-${VERSION}-installed ]; then
	mmtests_activity source-install
	$SHELLPACK_INCLUDE/shellpack-install-bonniepp -v ${VERSION}  || die bonniepp install script returned error
	mmtests_activity source-installed
fi
cd $SHELLPACK_SOURCES/bonniepp-${VERSION}-installed || die Failed to cd to bonniepp install directory
if [ "$INSTALL_ONLY" = "yes" ]; then
	echo bonniepp installed only as requested.
	exit $SHELLPACK_SUCCESS
fi
if [ "$INSTALL_ONLY" = "yes" ]; then
	echo bonniepp installed only as requested.
	exit $SHELLPACK_SUCCESS
fi

set_mmtests_numactl 0 0

DIRTEST_PARAM="-n 0"
FILETEST_PARAM="-s 0"
CHAR_IO_PARAM="-f"
if [ $NR_FILES -gt 0 ]; then
	NR_FILES=$((NR_FILES/1024))
	if [ $NR_FILES -eq 0 ]; then
		NR_FILES=1
	fi
	DIRTEST_PARAM="-n $NR_FILES:$DIRECTORY_SIZE:$DIRECTORY_SIZE:$NR_DIRECTORIES"
fi

if [ $DATASET_SIZE -gt 0 ]; then
	DATASET_SIZE=$((DATASET_SIZE/1048576))
	FILETEST_PARAM="-s $DATASET_SIZE"
fi

if [ $CHAR_IO_SIZE -gt 0 ]; then
	CHAR_IO_SIZE=$((CHAR_IO_SIZE/1048576))
	if [ $DATASET_SIZE -gt 0 ]; then
		CHAR_IO_PARAM="-f $CHAR_IO_SIZE"
	else
		CHAR_IO_PARAM="-F $CHAR_IO_SIZE"
	fi
fi

if [ "$FSYNC" = "yes" ]; then
	FSYNC_PARAM=-b
fi

USER_PARAM=
if [ "`whoami`" = "root" ]; then
	USER_PARAM="-u root"
fi

cd $SHELLPACK_SOURCES/bonniepp-${VERSION}-installed

echo ${MMTESTS_NUMACTL} ./sbin/bonnie++ \
	$FSYNC_PARAM -r 0 \
	-d $SHELLPACK_DATA \
	$FILETEST_PARAM \
	$DIRTEST_PARAM \
	$CHAR_IO_PARAM \
	-m $MACHINE \
	-R 128 | tee $LOGDIR_RESULTS/bonnie++-params

monitor_pre_hook $LOGDIR_RESULTS $P
save_rc ${MMTESTS_NUMACTL} ./sbin/bonnie++ $FSYNC_PARAM $USER_PARAM -r 0 \
	-d $SHELLPACK_DATA \
	$FILETEST_PARAM \
	$DIRTEST_PARAM \
	$CHAR_IO_PARAM \
	-m $MACHINE \
	-R 128 \
	-l $LOGDIR_RESULTS/bonnie-detail \
	2>&1 | tee $LOGDIR_RESULTS/bonnie
monitor_post_hook $LOGDIR_RESULTS $P

recover_rc
if [ $? -ne 0 ]; then
	die Failed to run bonnie
fi

gzip $LOGDIR_RESULTS/bonnie-detail

exit $SHELLPACK_SUCCESS
