#!/bin/bash
# This is the script for running the hackbench benchmark via
# perf sched bench messaging
P=hackbench-bench
DEFAULT_VERSION=5.1
. $SHELLPACK_INCLUDE/common.sh
TIME_CMD=`which time`
if [ "$TIME_CMD" = "" ]; then
        TIMEFORMAT="%2Uuser %2Ssystem %Relapsed %P%%CPU"
        TIME_CMD="time"
fi
CONN_NAME=
CONN_SWITCH=
TASK_SWITCH=
HACKBENCH_TYPE=process

# Basic argument parser
TASKSET_SERVER=
TASKSET_CLIENT=
TASKSET_ALL=
SERVERSIDE_COMMAND=none
SERVERSIDE_NAME=`date +%Y%m%d-%H%M-%S`

while [ "$1" != "" ]; do
	case "$1" in
	-v)
		VERSION=$2
		shift 2
		;;
	--serverside-command)
		SERVERSIDE_COMMAND=$2
		shift 2
		;;
	--serverside-name)
		SERVERSIDE_NAME=$2
		shift 2
		;;
	--install-only)
		INSTALL_ONLY=yes
		shift
		;;
	--install-force)
		INSTALL_FORCE=yes
		shift
		;;
	--pipes)
		CONN_SWITCH="--pipe"
		CONN_NAME=pipes
		shift
		;;
	--sockets)
		CONN_SWITCH=
		CONN_NAME=sockets
		shift
		;;
	--min-groups)
		HACKBENCH_MIN_GROUPS=$2
		shift 2
		;;
	--max-groups)
		HACKBENCH_MAX_GROUPS=$2
		shift 2
		;;
	--iterations)
		HACKBENCH_ITERATIONS=$2
		shift 2
		;;
	--type)
		HACKBENCH_TYPE=$2
		shift 2
		;;
	--loops)
		HACKBENCH_LOOPS=$2
		shift 2
		;;
	*)
		echo Unrecognised option: $1
		shift
	esac
done
if [ "$TASKSET_SERVER" != "" ]; then
	echo TASKSET_SERVER: $TASKSET_SERVER
	echo TASKSET_CLIENT: $TASKSET_CLIENT
fi
if [ -z "$VERSION" ]; then
	VERSION=$DEFAULT_VERSION
fi
# Include monitor hooks
. $SHELLPACK_INCLUDE/include-monitor.sh

if [ "$HACKBENCH_TYPE" = "thread" ]; then
	TASK_SWITCH="--thread"
fi

if [ "$INSTALL_FORCE" = "yes" ]; then
	rm -rf $SHELLPACK_SOURCES/perfbuild-${VERSION}
fi
if [ ! -d $SHELLPACK_SOURCES/perfbuild-${VERSION}-installed ]; then
	mmtests_activity source-install
	if [ ! -e  $SHELLPACK_INCLUDE/shellpack-install-perfbuild ]; then
		$SHELLPACK_TOPLEVEL/shellpack_src/src/refresh.sh perfbuild
	fi
	$SHELLPACK_INCLUDE/shellpack-install-perfbuild -v ${VERSION}  || die perfbuild install script returned error
	mmtests_activity source-installed
fi
cd $SHELLPACK_SOURCES/perfbuild-${VERSION}-installed || die Failed to cd to perfbuild install directory
if [ "$INSTALL_ONLY" = "yes" ]; then
	echo perfbuild installed only as requested.
	exit $SHELLPACK_SUCCESS
fi
if [ "$INSTALL_ONLY" = "yes" ]; then
	echo hackbench installed only as requested.
	exit $SHELLPACK_SUCCESS
fi

PERF_DIR=$SHELLPACK_SOURCES/perfbuild-${VERSION}-installed/bin
PERF_CMD=${PERF_DIR}/perf

RESULTSLOG=$LOGDIR_RESULTS/hackbench

# Ensure we don't hit the open file descriptor ulimit when running
# hackbench-threads-*. " * 2" adds a bit of headroom for marvin's
# processes, e.g. monitors.
ulimit -n $((HACKBENCH_MAX_GROUPS * 40 * 2))

THREADS=
START_THREAD=$HACKBENCH_MIN_GROUPS
END_THREAD=$HACKBENCH_MAX_GROUPS
#if [ $END_THREAD -gt 32 ]; then
#	THREADS=`seq $START_THREAD 3 8`
#	THREADS="$THREADS `seq 12 9 32`"
#	THREADS="$THREADS `seq 48 31 $END_THREAD`"
#elif [ $END_THREAD -gt 8 ]; then
#	THREADS=`seq $START_THREAD 2 8`
#	THREADS="$THREADS `seq 12 6 $END_THREAD`"
#else
#	THREADS=`seq $START_THREAD 2 $END_THREAD`
#fi
#if [ `echo $THREADS | awk '{print $NF}'` -ne $END_THREAD ]; then
	#THREADS="$THREADS $END_THREAD"
	THREADS="$END_THREAD"
#fi

for NR_THREADS in $THREADS; do
	if [ $NR_THREADS -lt $HACKBENCH_MIN_GROUPS ]; then
		continue
	fi
	if [ "$MMTESTS_THREAD_CUTOFF" != "" ]; then
		if [ $NR_THREADS -gt $MMTESTS_THREAD_CUTOFF ]; then
			echo Forcing HACKBENCH_MAX_GROUPS to $MMTESTS_THREAD_CUTOFF
			continue
		fi
	fi
	mmtests_activity $CONN_NAME-$NR_THREADS
	monitor_pre_hook $LOGDIR_RESULTS $NR_THREADS

for ITERATION in `seq 1 $HACKBENCH_ITERATIONS`; do
	mmtests_wait_token "iteration_begin"
	mmtests_activity iteration $ITERATION
		echo Running $CONN_NAME $NR_THREADS groups iteration $ITERATION/$HACKBENCH_ITERATIONS
		$TIME_CMD -o $LOGDIR_RESULTS/time-$NR_THREADS-$ITERATION  			\
			$PERF_CMD bench sched messaging 					\
				$CONN_SWITCH $TASK_SWITCH -g $NR_THREADS -l $HACKBENCH_LOOPS 	\
				> $LOGDIR_RESULTS/hackbench-$NR_THREADS-$ITERATION

		# Failure likely due to open file or pid limitations
		if [ $? -ne 0 ]; then
			monitor_post_hook $LOGDIR_RESULTS $NR_THREADS
			rm $LOGDIR_RESULTS/hackbench-$NR_THREADS-$ITERATION
			exit $SHELLPACK_SUCCESS
		fi
sync
mmtests_wait_token "iteration_end"
done
		if [ $NR_THREADS -eq $HACKBENCH_MAX_GROUPS ]; then
                	eval sh /mmtests/mmtests_CI/data_collection.sh 1 $LOGDIR_RESULTS $NR_THREADS$ITERATION &
		 
                 $TIME_CMD -o $LOGDIR_RESULTS/time-$NR_THREADS-$ITERATION                        \
                        $PERF_CMD bench sched messaging                                         \
                                $CONN_SWITCH $TASK_SWITCH -g $NR_THREADS -l 10000 		\
                                > $LOGDIR_RESULTS/perf_hackbench-$NR_THREADS-$ITERATION

		fi	
	monitor_post_hook $LOGDIR_RESULTS $NR_THREADS
done

exit $RETVAL
