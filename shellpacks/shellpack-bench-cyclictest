#!/bin/bash
# cyclictest
P=cyclictest-bench
DEFAULT_VERSION=v1.5
. $SHELLPACK_INCLUDE/common.sh
TIME_CMD=`which time`
if [ "$TIME_CMD" = "" ]; then
        TIMEFORMAT="%2Uuser %2Ssystem %Relapsed %P%%CPU"
        TIME_CMD="time"
fi
MIRROR_LOCATION="$WEBROOT/kernbench"
KERNEL_VERSION=5.2.14
WEB_LOCATION=https://www.kernel.org/pub/linux/kernel/v5.x

CYCLICTEST_BACKGROUND=none

# Basic argument parser
TASKSET_SERVER=
TASKSET_CLIENT=
TASKSET_ALL=
SERVERSIDE_COMMAND=none
SERVERSIDE_NAME=`date +%Y%m%d-%H%M-%S`

while [ "$1" != "" ]; do
	case "$1" in
	-v)
		VERSION=$2
		shift 2
		;;
	--serverside-command)
		SERVERSIDE_COMMAND=$2
		shift 2
		;;
	--serverside-name)
		SERVERSIDE_NAME=$2
		shift 2
		;;
	--install-only)
		INSTALL_ONLY=yes
		shift
		;;
	--install-force)
		INSTALL_FORCE=yes
		shift
		;;
	--duration)
		CYCLICTEST_DURATION=$2
		shift 2
		;;
	--background)
		CYCLICTEST_BACKGROUND=$2
		shift 2
		;;
	--affinity)
		CYCLICTEST_AFFINITY=yes
		shift
		;;
	*)
		echo Unrecognised option: $1
		shift
	esac
done
if [ "$TASKSET_SERVER" != "" ]; then
	echo TASKSET_SERVER: $TASKSET_SERVER
	echo TASKSET_CLIENT: $TASKSET_CLIENT
fi
if [ -z "$VERSION" ]; then
	VERSION=$DEFAULT_VERSION
fi
# Include monitor hooks
. $SHELLPACK_INCLUDE/include-monitor.sh

if [ "$INSTALL_ONLY" = "yes" ]; then
if [ "$INSTALL_FORCE" = "yes" ]; then
	rm -rf $SHELLPACK_SOURCES/rttestbuild-${VERSION}
fi
if [ ! -d $SHELLPACK_SOURCES/rttestbuild-${VERSION}-installed ]; then
	mmtests_activity source-install
	if [ ! -e  $SHELLPACK_INCLUDE/shellpack-install-rttestbuild ]; then
		$SHELLPACK_TOPLEVEL/shellpack_src/src/refresh.sh rttestbuild
	fi
	$SHELLPACK_INCLUDE/shellpack-install-rttestbuild -v ${VERSION}  || die rttestbuild install script returned error
	mmtests_activity source-installed
fi
cd $SHELLPACK_SOURCES/rttestbuild-${VERSION}-installed || die Failed to cd to rttestbuild install directory

case $CYCLICTEST_BACKGROUND in
kernbench)
	echo Preparing kernel tree for background job
	cd $SHELLPACK_DATA
	rm -f ./linux-$KERNEL_VERSION.tar.gz
	sources_fetch $WEB_LOCATION/linux-$KERNEL_VERSION.tar.gz $MIRROR_LOCATION/linux-$KERNEL_VERSION.tar.gz ./linux-$KERNEL_VERSION.tar.gz
	tar xf linux-$KERNEL_VERSION.tar.gz || die "Failed to extract"
	cd linux-$KERNEL_VERSION || die "Unexpected layout"
	yes '' | make defconfig &>/dev/null || die "Failed to make defconfig"
	make -j$NUMCPUS clean &> /dev/null

	cat << EOF > build-loop.sh
	cleanup() {
		killall -KILL make
	}
	trap cleanup EXIT
	cd $SHELLPACK_DATA/linux-$KERNEL_VERSION
	while [ 1 ]; do
		make -j$NUMCPUS vmlinux &> /dev/null
		make clean &> /dev/null
	done
EOF
	chmod a+x build-loop.sh
	;;
esac
	echo cyclictest installed only as requested.
	exit $SHELLPACK_SUCCESS
fi

cd $SHELLPACK_SOURCES/rttestbuild-${VERSION}-installed || die "Failed to change to rttest directory"
if [ "$CYCLICTEST_AFFINITY" = "yes" ]; then
	CYCLICTEST_AFFINITY_PARAM=-a
fi

BACKGROUND_PID=
case $CYCLICTEST_BACKGROUND in
hackbench)
	./hackbench -P -g $NUMCPUS -l 200000000 &
	BACKGROUND_PID=$!
	echo "Background hackbench $PID"
	;;
kernbench)
	$SHELLPACK_DATA/linux-$KERNEL_VERSION/build-loop.sh &
	BACKGROUND_PID=$!
	echo "Background kernbench $PID"
	;;
none)
	echo "No background task specified"
	;;
*)
	die "Unrecognised background task $CYCLICTEST_BACKGROUND"
	;;
esac
monitor_pre_hook $LOGDIR_RESULTS $P
echo Starting cyclictest threads
if [ "$CYCLICTEST_FINEGRAINED" != "yes" ]; then
	./cyclictest --mlockall -p99 --threads $CYCLICTEST_AFFINITY_PARAM \
		--distance=0 --duration=$CYCLICTEST_DURATION --quiet 2>&1 | \
		tee $LOGDIR_RESULTS/cyclictest.log
else
	./cyclictest --mlockall -p99 --threads $CYCLICTEST_AFFINITY_PARAM \
		--distance=0 --duration=$CYCLICTEST_DURATION -v 2>&1 | \
		stdout-buffer > $LOGDIR_RESULTS/cyclictest.log
	xz $LOGDIR_RESULTS/cyclictest.log
fi
if [ "$BACKGROUND_PID" != "" ]; then
	shutdown_pid $CYCLICTEST_BACKGROUND $BACKGROUND_PID
fi
monitor_post_hook $LOGDIR_RESULTS $P
exit $SHELLPACK_SUCCESS
