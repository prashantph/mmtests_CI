#!/bin/bash
P=dbench-bench
DEFAULT_VERSION=3.04
. $SHELLPACK_INCLUDE/common.sh
TIME_CMD=`which time`
if [ "$TIME_CMD" = "" ]; then
        TIMEFORMAT="%2Uuser %2Ssystem %Relapsed %P%%CPU"
        TIME_CMD="time"
fi

# Basic argument parser
TASKSET_SERVER=
TASKSET_CLIENT=
TASKSET_ALL=
SERVERSIDE_COMMAND=none
SERVERSIDE_NAME=`date +%Y%m%d-%H%M-%S`

while [ "$1" != "" ]; do
	case "$1" in
	-v)
		VERSION=$2
		shift 2
		;;
	--serverside-command)
		SERVERSIDE_COMMAND=$2
		shift 2
		;;
	--serverside-name)
		SERVERSIDE_NAME=$2
		shift 2
		;;
	--install-only)
		INSTALL_ONLY=yes
		shift
		;;
	--install-force)
		INSTALL_FORCE=yes
		shift
		;;
	*)
		echo Unrecognised option: $1
		shift
	esac
done
if [ "$TASKSET_SERVER" != "" ]; then
	echo TASKSET_SERVER: $TASKSET_SERVER
	echo TASKSET_CLIENT: $TASKSET_CLIENT
fi
if [ -z "$VERSION" ]; then
	VERSION=$DEFAULT_VERSION
fi
# Include monitor hooks
. $SHELLPACK_INCLUDE/include-monitor.sh

if [ "$INSTALL_FORCE" = "yes" ]; then
	rm -rf $SHELLPACK_SOURCES/dbench-${VERSION}
fi
if [ ! -d $SHELLPACK_SOURCES/dbench-${VERSION}-installed ]; then
	mmtests_activity source-install
	$SHELLPACK_INCLUDE/shellpack-install-dbench -v ${VERSION}  || die dbench install script returned error
	mmtests_activity source-installed
fi
cd $SHELLPACK_SOURCES/dbench-${VERSION}-installed || die Failed to cd to dbench install directory
if [ "$INSTALL_ONLY" = "yes" ]; then
	echo dbench installed only as requested.
	exit $SHELLPACK_SUCCESS
fi
if [ "$INSTALL_ONLY" = "yes" ]; then
	echo dbench installed only as requested.
	exit $SHELLPACK_SUCCESS
fi

if [ "$DBENCH_OSYNC" = "yes" ]; then
	DBENCH_OSYNC_COMMAND=-s
fi
if [ "$DBENCH_SYNC_DIRECTORY" = "yes" ]; then
	DBENCH_SYNC_COMMAND=-S
fi
if [ "$DBENCH_FSYNC" = "yes" ]; then
	DBENCH_FSYNC_COMMAND=-F
fi

DBENCH_CLIENTS=`echo $DBENCH_CLIENTS | tr ',' ' '`

CLIENT=1
if [ "$DBENCH_MIN_CLIENTS" != "" ]; then
	CLIENT=$DBENCH_MIN_CLIENTS
fi

LOADDIR=$SHELLPACK_SOURCES/dbench-${VERSION}-installed/share/

if [ "$DBENCH_DURATION_FACTOR" != "" ]; then
	FACTOR=$((DBENCH_DURATION_FACTOR*1000))
else
	./bin/dbench --run-once --skip-cleanup -D $SHELLPACK_DATA \
		--loadfile $LOADDIR/client-warmup.txt $DBENCH_MAX_CLIENTS \
		&>/dev/null
	FACTOR=$(./bin/dbench $DBENCH_OSYNC_COMMAND $DBENCH_SYNC_COMMAND \
		$DBENCH_FSYNC_COMMAND --show-execute-time --run-once \
		-D $SHELLPACK_DATA --loadfile $LOADDIR/client-tiny.txt \
		--machine-readable -t 10000 $DBENCH_MAX_CLIENTS | \
		grep "^@E@" | cut -d '@' -f 4 | head -n 1)
	# We multiply the factor by 3 to get enough time for at least about 3
	# runs of each client
	FACTOR=$((FACTOR * 3 / DBENCH_MAX_CLIENTS))
fi

while [ $CLIENT -le $DBENCH_MAX_CLIENTS ]; do
	mmtests_activity client $CLIENT
	monitor_pre_hook $LOGDIR_RESULTS $CLIENT
	# Make sure test tree is clean before the run - dbench does not clean
	# up after itself
	rm -rf $SHELLPACK_DATA/clients &>/dev/null
	sync
	# First create directory hierarchy
	./bin/dbench --run-once --skip-cleanup -D $SHELLPACK_DATA \
		--loadfile $LOADDIR/client-warmup.txt $CLIENT &>/dev/null

	# Then run the benchmark
	echo dbench run $CLIENT
	./bin/dbench $DBENCH_OSYNC_COMMAND $DBENCH_SYNC_COMMAND $DBENCH_FSYNC_COMMAND \
		-D $SHELLPACK_DATA --warmup 0 \
		-t $((DBENCH_DURATION_BASE + FACTOR*CLIENT/1000)) \
		--loadfile $LOADDIR/client-tiny.txt --show-execute-time \
		$CLIENT 2>&1 > $LOGDIR_RESULTS/dbench-$CLIENT.log
	monitor_post_hook $LOGDIR_RESULTS $CLIENT
	gzip $LOGDIR_RESULTS/dbench-$CLIENT.log
	if [ $CLIENT -lt $NUMCPUS ]; then
		CLIENT=$((CLIENT*2))
	else
		CLIENT=$((CLIENT*8))
	fi
done

exit $SHELLPACK_SUCCESS
