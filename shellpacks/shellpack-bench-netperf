#!/bin/bash
# This script installs netperf and runs the regression tests
P=netperf-bench
DEFAULT_VERSION=2.4.5
. $SHELLPACK_INCLUDE/common.sh
TIME_CMD=`which time`
if [ "$TIME_CMD" = "" ]; then
        TIMEFORMAT="%2Uuser %2Ssystem %Relapsed %P%%CPU"
        TIME_CMD="time"
fi
PROTOCOLS="UDP_STREAM TCP_STREAM"
BUFFER_SIZES="64 128 256 1024 2048 3312 4096 6144 8192 10240 12288 14336 16384"

TASKSET_SERVER=
TASKSET_CLIENT=
SERVER_HOST=127.0.0.1
if [ "$REMOTE_SERVER_HOST" != "" ]; then
	SERVER_HOST=$REMOTE_SERVER_HOST
fi

# Basic argument parser
TASKSET_SERVER=
TASKSET_CLIENT=
TASKSET_ALL=
SERVERSIDE_COMMAND=none
SERVERSIDE_NAME=`date +%Y%m%d-%H%M-%S`

while [ "$1" != "" ]; do
	case "$1" in
	-v)
		VERSION=$2
		shift 2
		;;
	--serverside-command)
		SERVERSIDE_COMMAND=$2
		shift 2
		;;
	--serverside-name)
		SERVERSIDE_NAME=$2
		shift 2
		;;
	--install-only)
		INSTALL_ONLY=yes
		shift
		;;
	--install-force)
		INSTALL_FORCE=yes
		shift
		;;
	--bind-pinned)
		CPUA=`numactl --hardware | grep ^node | grep cpus: | head -1 | awk '{print $4}'`
		TASKSET_SERVER="taskset -c $CPUA"
		TASKSET_CLIENT="taskset -c $CPUA"
		TASKSET_ALL="taskset -c $CPUA"
		shift
		;;
	--bind-cross-node)
		CPUA=`numactl --hardware | grep ^node | grep cpus: | head -1 | awk '{print $4}'`
		CPUB=`numactl --hardware | grep ^node | grep cpus: | tail -1 | awk '{print $NF}'`
		TASKSET_SERVER="taskset -c $CPUA"
		TASKSET_CLIENT="taskset -c $CPUB"
		TASKSET_ALL="taskset -c $CPUA,$CPUB"
		shift
		;;
	--bind-cross-socket)
		CPUA=`numactl --hardware | grep ^node | grep cpus: | head -1 | awk '{print $4}'`
		CPUB=`list-cpu-siblings.pl $CPUA cores 0 | awk -F , '{print $1}'`
		TASKSET_SERVER="taskset -c $CPUA"
		TASKSET_CLIENT="taskset -c $CPUB"
		TASKSET_ALL="taskset -c $CPUA,$CPUB"
		shift
		;;
	--bind-cross-ht)
		CPUA=`numactl --hardware | grep ^node | grep cpus: | head -1 | awk '{print $4}'`
		CPUB=`list-cpu-siblings.pl $CPUA threads 0 | awk -F , '{print $1}'`
		if [ "$CPUB" = "" ]; then
			echo ERROR: Could not identify HT thread for CPU $CPUA
			exit $SHELLPACK_ERROR
		fi
		TASKSET_SERVER="taskset -c $CPUA"
		TASKSET_CLIENT="taskset -c $CPUB"
		TASKSET_ALL="taskset -c $CPUA,$CPUB"
		shift
		;;
	--iterations)
		ITERATIONS=$2
		shift 2
		;;
	--protocol)
		PROTOCOL=$2
		shift 2
		;;
	--buffer-sizes)
		BUFFER_SIZES=$2
		shift 2
		;;
	*)
		echo Unrecognised option: $1
		shift
	esac
done
if [ "$TASKSET_SERVER" != "" ]; then
	echo TASKSET_SERVER: $TASKSET_SERVER
	echo TASKSET_CLIENT: $TASKSET_CLIENT
fi
if [ -z "$VERSION" ]; then
	VERSION=$DEFAULT_VERSION
fi
# Include monitor hooks
. $SHELLPACK_INCLUDE/include-monitor.sh

if [ "$INSTALL_FORCE" = "yes" ]; then
	rm -rf $SHELLPACK_SOURCES/netperf-${VERSION}
fi
if [ ! -d $SHELLPACK_SOURCES/netperf-${VERSION}-installed ]; then
	mmtests_activity source-install
	$SHELLPACK_INCLUDE/shellpack-install-netperf -v ${VERSION}  || die netperf install script returned error
	mmtests_activity source-installed
fi
cd $SHELLPACK_SOURCES/netperf-${VERSION}-installed || die Failed to cd to netperf install directory
if [ "$INSTALL_ONLY" = "yes" ]; then
	echo netperf installed only as requested.
	exit $SHELLPACK_SUCCESS
fi
if [ "$INSTALL_ONLY" = "yes" ]; then
	echo netperf installed only as requested.
	exit $SHELLPACK_SUCCESS
fi

BUFFER_SIZES=`echo $BUFFER_SIZES | sed -e 's/,/ /g'`

export REMOTE_SERVER_SCRIPT=$SCRIPTDIR/shellpacks/shellpack-bench-netperf
case $SERVERSIDE_COMMAND in
start)
	echo Killing old servers
	killall netserver

	echo Starting server
	mmtests_activity netperf-$SERVERSIDE_NAME
	monitor_pre_hook $LOGDIR_RESULTS netperf-$SERVERSIDE_NAME
	NETROOT=$SHELLPACK_SOURCES/netperf-${VERSION}-installed 
	$TASKSET_SERVER $NETROOT/bin/netserver || die Failed to start netserver
	sleep 2
	exit $SHELLPACK_SUCCESS
	;;
stop)
	monitor_post_hook $LOGDIR_RESULTS netperf-$SERVERSIDE_NAME
	echo Killing old servers
	killall netserver
	exit $SHELLPACK_SUCCESS
	;;
flush)
	exit $SHELLPACK_SUCCESS
	;;
none)
	echo Killing old servers
	killall netserver

	echo Starting server
	NETROOT=$SHELLPACK_SOURCES/netperf-${VERSION}-installed 
	$TASKSET_SERVER $NETROOT/bin/netserver || die Failed to start netserver
	sleep 2
	;;
*)
	die Unrecognised server-side command
	;;
esac

echo $PROTOCOL > $LOGDIR_RESULTS/protocols
EXTRA=
if [ "$PROTOCOL" = "UDP_STREAM" ]; then
	EXTRA="-P 15895"
fi

for SIZE in $BUFFER_SIZES; do
mmtests_server_ctl start --serverside-name $PROTOCOL-$SIZE
for ITERATION in `seq 1 $ITERATIONS`; do
	mmtests_wait_token "iteration_begin"
	mmtests_activity iteration $ITERATION
	mmtests_activity size $SIZE
	MSGSIZE_OPT=
	SOCKETSIZE_OPT=
	if [ "$PROTOCOL" = "UDP_STREAM" -o "$PROTOCOL" = "TCP_STREAM" -o "$PROTOCOL" = "STREAM_STREAM" ]; then
		MSGSIZE_OPT="-m $SIZE -M $SIZE"
	fi
	if [ "$REMOTE_SERVER_HOST" != "" ]; then
		# UDP_STREAM on a 10GbE network was found to lose excessive
		# packets unless the socket sizes were increase. These values
		# resulted in minimal packet loss.
		if [ "$PROTOCOL" = "UDP_STREAM" ]; then
			SOCKETSIZE_OPT="-s 851968 -S 851968"
		fi
	fi
	
	echo Running test $PROTOCOL iteration $ITERATION/$ITERATIONS size $SIZE
	NETPERF_OPTS="\
		-t $PROTOCOL \
		-i 3,3 -I 95,5 \
		-H $SERVER_HOST \
		-- $SOCKETSIZE_OPT $MSGSIZE_OPT $EXTRA"
	echo $TASKSET_CLIENT "netperf" $NETPERF_OPTS
	monitor_pre_hook $LOGDIR_RESULTS $SIZE
	eval $TASKSET_CLIENT $NETROOT/bin/netperf $NETPERF_OPTS \
			2>&1 | tee $LOGDIR_RESULTS/$PROTOCOL-${SIZE}.$ITERATION \
			|| die Failed to run netperf
	monitor_post_hook $LOGDIR_RESULTS $SIZE
sync
mmtests_wait_token "iteration_end"
done
mmtests_server_ctl stop --serverside-name $PROTOCOL-$SIZE
done
killall netserver

exit $SHELLPACK_SUCCESS
