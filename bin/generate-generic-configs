#!/bin/bash
export SCRIPT=`basename $0 | sed -e 's/\./\\\./'`
export SCRIPTDIR=`echo $0 | sed -e "s/$SCRIPT//"`
cd $SCRIPTDIR/../configs || exit

# bonnie
for FILE in `ls config-io-bonnie*-async`; do
	FSYNC_FILE=`echo $FILE | sed -e 's/-async$/-fsync/'`
	sed -e 's/FSYNC=no/FSYNC=yes/'		\
	    -e 's/asynchronous/synchronous/'	\
	    $FILE > $FSYNC_FILE
done

# Graph 500
for SIZE in kinder toy; do
	sed -e "s/WORKSET=.*/WORKSET=$SIZE/" config-hpc-graph500-omp-infant > config-hpc-graph500-omp-$SIZE
done

# KVM start
cp config-workload-kvmstart-memhog config-workload-kvmstart-deployonly
sed -i -e 's/KVMSTART_MIN_MEMORY=.*/KVMSTART_MIN_MEMORY=\$((KVMSTART_MAX_MEMORY+1))/' config-workload-kvmstart-deployonly

# o fragmenting with single file
cp config-workload-kvmstart-memhog config-workload-kvmstart-memhog-frag-singlefile
cat >> config-workload-kvmstart-memhog-frag-singlefile <<EOF
export KVMSTART_PRETEST=fragment
export KVMSTART_PRETEST_METHOD="single-file"
export KVMSTART_PRETEST_PREPARE_ARGS="--filesize \$KVMSTART_MAX_MEMORY"
export KVMSTART_PRETEST_RUN_ARGS=
export KVMSTART_PRETEST_CLEANUP_ARGS=
EOF
# o fragmenting with single file, THP disabled
cp config-workload-kvmstart-memhog-frag-singlefile config-workload-kvmstart-memhog-frag-singlefile-nothp
cat >> config-workload-kvmstart-memhog-frag-singlefile-nothp <<EOF
echo never > /sys/kernel/mm/transparent_hugepage/enabled
EOF

# o fragmenting with fio
cp config-workload-kvmstart-memhog config-workload-kvmstart-memhog-frag-fio-randread
cat >> config-workload-kvmstart-memhog-frag-fio-randread <<EOF
export KVMSTART_PRETEST=fragment
export KVMSTART_PRETEST_METHOD="fio-random-reader"
export KVMSTART_PRETEST_PREPARE_ARGS="--fio-threads 4 --fio-version 2.99 --fio-size \$((MEMTOTAL_BYTES*4/2))"
export KVMSTART_PRETEST_RUN_ARGS=\$KVMSTART_PRETEST_PREPARE_ARGS
export KVMSTART_PRETEST_CLEANUP_ARGS=
EOF

# NAS
for TYPE in omp mpi; do
	sed -e 's/NAS_MAX_CPUS=.*/NAS_MAX_CPUS=$((NUMCPUS\/2))/' config-hpc-nas-c-class-$TYPE-full > config-hpc-nas-c-class-$TYPE-half
	sed -e 's/NAS_MAX_CPUS=.*/NAS_MAX_CPUS=$((NUMCPUS\/3))/' config-hpc-nas-c-class-$TYPE-full > config-hpc-nas-c-class-$TYPE-third
	sed -e 's/NAS_MAX_CPUS=.*/NAS_MAX_CPUS=2/' config-hpc-nas-c-class-$TYPE-full > config-hpc-nas-c-class-$TYPE-pair
	sed -e 's/NAS_MAX_CPUS=.*/NAS_MAX_CPUS=4/' config-hpc-nas-c-class-$TYPE-full > config-hpc-nas-c-class-$TYPE-minparallel
done
for CONFIG in `ls config-hpc-nas-c-class-*`; do
	# D class configurations
	DCONFIG=`echo $CONFIG | sed -e 's/nas-c-class/nas-d-class/'`
	sed	-e 's/NAS_CLASS=.*/NAS_CLASS=D/'		\
		-e 's/NAS_ITERATIONS=.*/NAS_ITERATIONS=3/'	\
		-e 's/ nas-...-ft//'				\
		-e 's/ nas-omp-cg/ nas-omp-cg nas-omp-dc/'	\
		$CONFIG > $DCONFIG

	# D class with binding configurations
	BDCONFIG=`echo $DCONFIG | sed -e 's/class-mpi/class-mpi-bind/' -e 's/class-omp/class-omp-bind/'`
	cp $DCONFIG $BDCONFIG
	echo "export NAS_BIND=yes" >> $BDCONFIG
done

# Netperf
sed -e 's/NETPERF_BUFFER_SIZES=.*/NETPERF_BUFFER_SIZES=64/' config-network-netperf-cstate  > config-network-netperf-cstate-small
sed -e 's/NETPERF_BUFFER_SIZES=.*/NETPERF_BUFFER_SIZES=64/' config-network-netperf-unbound > config-network-netperf-unbound-small

# Stressng
sed -e 's/THREADS=.*/THREADS=1024/' config-workload-stressng-get > config-workload-stressng-get-1k
